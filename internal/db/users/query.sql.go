// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package users

import (
	"context"
)

const changeLangAutodetect = `-- name: ChangeLangAutodetect :one
UPDATE user
SET lang_autodetect = NOT lang_autodetect
WHERE tg_id = ?
RETURNING id, tg_id, lang_autodetect, registered_at
`

func (q *Queries) ChangeLangAutodetect(ctx context.Context, tgID int64) (User, error) {
	row := q.db.QueryRowContext(ctx, changeLangAutodetect, tgID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.TgID,
		&i.LangAutodetect,
		&i.RegisteredAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO user (
    tg_id
) VALUES (
    ?
)
RETURNING id, tg_id, lang_autodetect, registered_at
`

func (q *Queries) CreateUser(ctx context.Context, tgID int64) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, tgID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.TgID,
		&i.LangAutodetect,
		&i.RegisteredAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, tg_id, lang_autodetect, registered_at FROM user
WHERE tg_id = ? LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, tgID int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, tgID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.TgID,
		&i.LangAutodetect,
		&i.RegisteredAt,
	)
	return i, err
}
