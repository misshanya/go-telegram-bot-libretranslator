// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package users

import (
	"context"
)

const changeLangAutodetect = `-- name: ChangeLangAutodetect :one
UPDATE user
SET lang_autodetect = NOT lang_autodetect
WHERE tg_id = ?
RETURNING id, tg_id, lang_autodetect, registered_at, source_lang, target_lang
`

func (q *Queries) ChangeLangAutodetect(ctx context.Context, tgID int64) (User, error) {
	row := q.db.QueryRowContext(ctx, changeLangAutodetect, tgID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.TgID,
		&i.LangAutodetect,
		&i.RegisteredAt,
		&i.SourceLang,
		&i.TargetLang,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO user (
    tg_id
) VALUES (
    ?
)
RETURNING id, tg_id, lang_autodetect, registered_at, source_lang, target_lang
`

func (q *Queries) CreateUser(ctx context.Context, tgID int64) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, tgID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.TgID,
		&i.LangAutodetect,
		&i.RegisteredAt,
		&i.SourceLang,
		&i.TargetLang,
	)
	return i, err
}

const getSourceLang = `-- name: GetSourceLang :one
SELECT source_lang FROM user
WHERE tg_id = ? LIMIT 1
`

func (q *Queries) GetSourceLang(ctx context.Context, tgID int64) (string, error) {
	row := q.db.QueryRowContext(ctx, getSourceLang, tgID)
	var source_lang string
	err := row.Scan(&source_lang)
	return source_lang, err
}

const getTargetLang = `-- name: GetTargetLang :one
SELECT target_lang FROM user
WHERE tg_id = ? LIMIT 1
`

func (q *Queries) GetTargetLang(ctx context.Context, tgID int64) (string, error) {
	row := q.db.QueryRowContext(ctx, getTargetLang, tgID)
	var target_lang string
	err := row.Scan(&target_lang)
	return target_lang, err
}

const getUser = `-- name: GetUser :one
SELECT id, tg_id, lang_autodetect, registered_at, source_lang, target_lang FROM user
WHERE tg_id = ? LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, tgID int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, tgID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.TgID,
		&i.LangAutodetect,
		&i.RegisteredAt,
		&i.SourceLang,
		&i.TargetLang,
	)
	return i, err
}

const setSourceLang = `-- name: SetSourceLang :exec
UPDATE user
SET source_lang = ?
WHERE tg_id = ?
`

type SetSourceLangParams struct {
	SourceLang string
	TgID       int64
}

func (q *Queries) SetSourceLang(ctx context.Context, arg SetSourceLangParams) error {
	_, err := q.db.ExecContext(ctx, setSourceLang, arg.SourceLang, arg.TgID)
	return err
}

const setTargetLang = `-- name: SetTargetLang :exec
UPDATE user
SET target_lang = ?
WHERE tg_id = ?
`

type SetTargetLangParams struct {
	TargetLang string
	TgID       int64
}

func (q *Queries) SetTargetLang(ctx context.Context, arg SetTargetLangParams) error {
	_, err := q.db.ExecContext(ctx, setTargetLang, arg.TargetLang, arg.TgID)
	return err
}
